name: github-actions-template
run-name: ${{ github.actor }} is running GitHub Actions templates

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
      - release/*
      - feature/*
    paths:
        - 'force-app/**'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
        - master
    paths:
        - 'force-app/**'
      
jobs:
  build:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    # container:
    #  image: salesforce/salesforcedx:latest-full
      
    steps:
    
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install CLI
        run: |
          npm install
          npm install @salesforce/cli --global
          sf --help
          
      # Run PMD scan
      - name: 'Run PMD scan'
        uses: pmd/pmd-github-action@v1
        id: pmd
        with:
            sourcePath: 'force-app'
            rulesets: 'ruleset.xml'
            analyzeModifiedFilesOnly: false

      # Check for PMD violations
      - name: 'Check for PMD violations'
        # if: steps.pmd.outputs.violations != 0
        run: |
          # exit 1
          echo "test"
      
      - name: Upload SARIF file
        # if: steps.pmd.outputs.violations != 0
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: pmd-report.sarif
          
      - name: Install the SFDX Git Delta Plugin
        run: |
          echo 'y' | sf plugins install sfdx-git-delta
      
      - name: Generate the Delta Since Last Commit
        run: |
          mkdir delta
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output "./delta" -i .sgdignore -d
          cat delta/package/package.xml
      
      - name: Decrypt server key
        run: |
            #Decrypt server key
            openssl enc -nosalt -aes-256-cbc -d -in ${{ secrets.ENCRYPTION_KEY_FILE }} -out ${{ secrets.JWT_KEY_FILE }} -base64 -K ${{ secrets.DECRYPTION_KEY }} -iv ${{ secrets.DECRYPTION_IV }}
      
      - name: Authenticate Salesforce ORG
        run: |
          sf org login jwt --client-id ${{ secrets.HUB_CONSUMER_KEY }} --jwt-key-file  ${{ secrets.JWT_KEY_FILE }} --username ${{ secrets.HUB_USER_NAME }} --set-default --alias HubOrg --instance-url ${{ secrets.HUB_LOGIN_URL }} 
    
      - name: Install SFDX CLI Scanner
        run: |
          echo 'y' | sf plugins install @salesforce/sfdx-scanner
          
      - name: Run SFDX CLI Scanner
        run: |
          sf scanner run -f html -t "force-app" -e "eslint,retire-js,pmd,cpd" -c "Design,Best Practices,Code Style,Performance,Security" --outfile reports/scan-reports.html
          
      - uses: actions/upload-artifact@v3
        with:
          name: cli-scan-report
          path: reports/scan-reports.html
          
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Install the JEST Plugin
        run: |
          # npm install
          npm install @salesforce/sfdx-lwc-jest --save-dev

      - name: Validate components to Salesforce
        run: |
          sf project deploy validate --manifest delta/package/package.xml --test-level RunLocalTests --target-org HubOrg --coverage-formatters lcov --coverage-formatters clover
          
      - name: Deploy code to Salesforce Org
        if: github.event.pull_request.merged == true
        run: |
          echo "Deploying Code to Org."
          sf project deploy start --manifest delta/package/package.xml --test-level RunLocalTests --target-org HubOrg

      - name: 'Run Apex tests'
        run: |
          sf apex run --target-org HubOrg --file ~/test.apex
        
      - name: 'Delete coverage file (temporary step)'
        run: rm ./tests/apex/test-result-707*-codecoverage.json
    
      - name: 'Upload code coverage for Apex to Codecov.io'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          flags: Apex
      
      - name: 'Lint Lightning Web Components'
        run: |
          # npm run lint:lwc
          echo "Lint Lightning Web Components."
        
      - name: Run the Jest coverage script
        if: github.event.pull_request.merged == true
        run: |
          npm run test:unit:coverage
          echo "Run the Jest coverage script."
          
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          flags: LWC
